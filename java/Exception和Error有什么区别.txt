在 Java 中只有 Throwable 类型的实例才可以被抛出（throw）或者捕获（catch），Exception 和 Error 都是继承了 Throwable 类。

Exception 是程序正常运行中，可以预料的意外情况，可能并且应该被捕获，进行相应处理。Exception 又分为检查型（checked）异常和非检查型（unchecked）异常。

检查型异常，又可理解为一般异常，在源代码里必须显式地进行捕获处理；非检查型异常就是运行时异常，在编译期不强制要求捕获。




Error 是指在正常情况下，不大可能出现的情况，绝大部分的 Error 都会导致程序（比如JVM自身）处于非正常的、不可恢复状态。

NoSuchFieldError
OutOfmemoryError
NoClassDefFoundError
NoSuchMethodError

语法
try-catch-finally块
try-with-resources
multiple catch
throws关键字
throw关键字

应用
1. 尽量不要捕获类似Exception这样的通用异常，而是捕获特定异常。
2. 不要生吞异常。生吞异常可能会导致难以诊断的诡异情况。
3. 不要使用printStackTrace()。标准输出有时不是个合适的输出选项，因为很难判断输出到哪里去了。
4. 最好使用日志，将异常输出信息输出到日志系统里。
5. 第一时间要将异常抛出去，在捕获异常后，如果不知道如何处理，可以选择保留原有异常的 cause 信息，直接再抛出或者构建新的异常抛出去。
6. 自定义异常除了保证提供足够的异常信息，还要考虑以下两点:
	6.1. 是否需要定义成Checked Exception,  因为这种类型设计的初衷更是为了从异常情况恢复，作为异常设计者，我们往往有充足信息进行分类
	6.2. 在保证诊断信息足够的同时，也要考虑避免包含敏感信息，因为那样可能导致潜在的安全问题。


性能角度

异常处理机制有两个开销相对昂贵的地方：
1. try-catch代码段会产生额外的性能开销，
2. 每实例化一个Exception，都会对当时的栈进行快照。


疑问
1. try-catch的性能开销在什么地方，是如何影响 JVM对代码进行优化的
2. 如何对栈进行快照