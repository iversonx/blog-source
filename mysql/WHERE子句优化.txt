MySQL执行的一些优化：
1. 删除不必要的括号：
((a AND b) AND c OR (((a AND b) AND (c AND d)))) 会优化为 (a AND b AND c) OR (a AND b AND c AND d)

2. 常量折叠
(a<b AND b=c) AND a=5 优化为 b>5 AND b=c AND a=5

3. 恒定条件去除（因不断折叠而需要）：
(B>=5 AND B=5) OR (B=6 AND 5=5) OR (B=7 AND 5=6) -> B=5 OR B=6

4. 索引使用的常量表达式仅计算一次。

5. 在没有WHERE的单个表上的COUNT（*）直接从MyISAM和MEMORY表的表信息中检索。 当仅与一个表一起使用时，也可以对任何NOT NULL表达式执行此操作。

6. 早期检测无效常量表达式。 MySQL快速检测到某些SELECT语句是不可能的，并且不返回任何行。

7. 如果不使用GROUP BY或聚合函数（COUNT（），MIN（）等），HAVING将与WHERE合并。

8. 对于连接中的每个表，构造一个更简单的WHERE以获得对表的快速WHERE评估，并且还尽快跳过行。

9.  首先读取所有常量表，然后再读取查询中的任何其他表。常量表是下列任一项
9.1 空表或只有一行的表
9.2 与主键或唯一索引的WHERE子句一起使用的表，其中所有索引部分都与常量表达式比较，并定义为非空。
以下所有表都用作常量表
SELECT * FROM t WHERE primary_key=1;
SELECT * FROM t1,t2 WHERE t1.primary_key=1 AND t2.primary_key=t1.id;


10. 通过尝试所有可能的方法，可以找到联接表的最佳联接组合。如果ORDER BY和GROUP BY子句中的所有列都来自同一个表，则在联接时最好先使用该表。

11. 如果存在ORDER BY子句和其他GROUP BY子句，或者ORDER BY或GROUP BY包含来自联接队列中第一个表以外的表的列，则创建临时表。

12. 如果使用sql_small_result修饰符，mysql将使用内存中的临时表。

13. 查询每个表索引，并使用最佳索引，除非优化器认为使用表扫描更有效。以前根据索引是否跨越超过表的30%来使用表扫描;优化器现在更复杂，并且基
于其他因素（例如表大小，行数和I / O块大小）进行估算。

14. 在输出每一行之前，将跳过与HAVING子句不匹配的行。

一些非常快的查询示例：

SELECT COUNT(*) FROM tbl_name;

SELECT MIN(key_part1),MAX(key_part1) FROM tbl_name;

SELECT MAX(key_part2) FROM tbl_name WHERE key_part1=constant;

SELECT ... FROM tbl_name ORDER BY key_part1,key_part2,... LIMIT 10;

SELECT ... FROM tbl_name ORDER BY key_part1 DESC, key_part2 DESC, ... LIMIT 10;

MySQL仅使用索引树解析以下查询，前提是索引列为数字：
SELECT key_part1,key_part2 FROM tbl_name WHERE key_part1=val;

SELECT COUNT(*) FROM tbl_name WHERE key_part1=val1 AND key_part2=val2;

SELECT key_part2 FROM tbl_name GROUP BY key_part1;

以下查询使用索引来按排序顺序检索行，而不使用单独的排序过程：
SELECT ... FROM tbl_name ORDER BY key_part1,key_part2,... ;

SELECT ... FROM tbl_name ORDER BY key_part1 DESC, key_part2 DESC, ... ;



